"use strict";exports.id=905,exports.ids=[905],exports.modules={2905:(t,e,i)=>{i.d(e,{OY:()=>WebAIApi,Pf:()=>createTenantSetupApi});let WebAIApi=class WebAIApi{constructor(t){this.abortController=null,this.config=t,this.debugLog("WebAI API initialized with config:",t)}debugLog(...t){this.config.debug&&console.log("[WebAI API]",...t)}updateConfig(t){this.config={...this.config,...t},this.debugLog("Config updated:",this.config)}async *chat(t){let e=t[t.length-1];if(!e||"user"!==e.role)throw Error("Last message must be from user");this.abortController&&this.abortController.abort(),this.abortController=new AbortController;let i={message:e.content,session_id:this.config.sessionId,use_redis_conversations:!0,use_rag:this.config.useRAG,rag_top_k:this.config.ragTopK};this.debugLog("Sending chat request:",i);try{let t=await fetch(`${this.config.apiUrl}/chat/stream`,{method:"POST",headers:{"Content-Type":"application/json","X-Tenant-ID":this.config.tenantId},body:JSON.stringify(i),signal:this.abortController.signal});if(!t.ok){let e=await t.text().catch(()=>"Unknown error"),i=`HTTP ${t.status}: ${t.statusText}`;try{let t=JSON.parse(e);i=t.detail||i}catch{e&&(i=e)}throw Error(i)}let e=t.body?.getReader();if(!e)throw Error("No response body available");let a=new TextDecoder,o="",n="";for(;;){let t;let{done:i,value:r}=await e.read();if(i)break;for(o+=a.decode(r,{stream:!0});-1!==(t=o.indexOf("\n"));){let e=o.slice(0,t).trimEnd();if(o=o.slice(t+1),!e.startsWith("data: "))continue;let i=e.slice(6).trim();if("[DONE]"===i){this.debugLog("Stream completed, full response length:",n.length),yield{role:"assistant",content:"",delta:!1,finished:!0};return}try{let t=JSON.parse(i);if(t.error)throw Error(t.error);let e=t.choices?.[0]?.delta?.content;e&&(n+=e,this.debugLog("Received delta:",e.length,"chars"),yield{role:"assistant",content:e,delta:!0})}catch(t){!this.config.debug||t instanceof SyntaxError||console.warn("[WebAI API] Parse error:",t,"for data:",i)}}}}catch(t){if(t instanceof Error){if("AbortError"===t.name){this.debugLog("Request aborted");return}this.debugLog("Chat error:",t.message),yield{role:"assistant",content:"",delta:!1,error:t.message}}else this.debugLog("Unknown error:",t),yield{role:"assistant",content:"",delta:!1,error:"An unknown error occurred"}}finally{this.abortController=null}}cancel(){this.abortController&&(this.abortController.abort(),this.abortController=null,this.debugLog("Request cancelled"))}async testConnection(){try{let t=await fetch(`${this.config.apiUrl}/health`,{method:"GET",headers:{"X-Tenant-ID":this.config.tenantId}}),e=t.ok;return this.debugLog("Connection test:",e?"SUCCESS":"FAILED"),e}catch(t){return this.debugLog("Connection test error:",t),!1}}async getTenantConfig(){try{let t=await fetch(`${this.config.apiUrl}/tenants/${this.config.tenantId}`,{method:"GET",headers:{"X-Tenant-ID":this.config.tenantId}});if(!t.ok)throw Error(`Failed to get tenant config: ${t.statusText}`);let e=await t.json();return this.debugLog("Tenant config:",e),e}catch(t){throw this.debugLog("Failed to get tenant config:",t),t}}async getConversationHistory(){try{let t=await fetch(`${this.config.apiUrl}/conversations/${this.config.sessionId}`,{method:"GET",headers:{"X-Tenant-ID":this.config.tenantId}});if(!t.ok)return this.debugLog("No conversation history available"),[];let e=await t.json();return this.debugLog("Loaded conversation history:",e.length,"messages"),e}catch(t){return this.debugLog("Failed to load conversation history:",t),[]}}async clearConversationHistory(){try{let t=await fetch(`${this.config.apiUrl}/conversations/${this.config.sessionId}`,{method:"DELETE",headers:{"X-Tenant-ID":this.config.tenantId}});if(!t.ok)throw Error(`Failed to clear conversation: ${t.statusText}`);this.debugLog("Conversation history cleared")}catch(t){throw this.debugLog("Failed to clear conversation history:",t),t}}};let WebAITenantSetupApi=class WebAITenantSetupApi extends WebAIApi{async registerTenant(t){try{let e=process.env.NEXT_PUBLIC_WEBAI_ADMIN_KEY;if(!e)throw Error("NEXT_PUBLIC_WEBAI_ADMIN_KEY environment variable is required");let i=await fetch(`${this.config.apiUrl}/register-tenant`,{method:"POST",headers:{"Content-Type":"application/json","X-Admin-Key":e},body:JSON.stringify(t)});if(!i.ok){let t=await i.text().catch(()=>"Unknown error"),e=`HTTP ${i.status}: ${i.statusText}`;try{let i=JSON.parse(t);e=i.detail||e}catch{t&&(e=t)}throw Error(e)}let a=await i.json();return this.debugLog("Tenant registered successfully:",a),a}catch(t){throw this.debugLog("Failed to register tenant:",t),t}}async validateOpenRouterKey(t){try{let e=await fetch(`${this.config.apiUrl}/api-keys/validate`,{method:"POST",headers:{"Content-Type":"application/json","X-Tenant-ID":this.config.tenantId},body:JSON.stringify({api_key:t,provider:"openrouter"})});if(!e.ok)throw Error(`Validation failed: ${e.statusText}`);let i=await e.json();return this.debugLog("API key validation result:",i),i}catch(t){throw this.debugLog("Failed to validate API key:",t),t}}async getSystemCapabilities(){try{let t=await fetch(`${this.config.apiUrl}/rag/processing-capabilities`,{method:"GET",headers:{"X-Tenant-ID":this.config.tenantId}});if(!t.ok)throw Error(`Failed to get capabilities: ${t.statusText}`);let e=await t.json();return this.debugLog("System capabilities:",e),e}catch(t){throw this.debugLog("Failed to get system capabilities:",t),t}}async analyzeFile(t){try{let e=new FormData;e.append("file",t),e.append("tenant_id",this.config.tenantId);let i=await fetch(`${this.config.apiUrl}/rag/analyze-file`,{method:"POST",headers:{"X-Tenant-ID":this.config.tenantId},body:e});if(!i.ok)throw Error(`File analysis failed: ${i.statusText}`);let a=await i.json();return this.debugLog("File analysis result:",a),a}catch(t){throw this.debugLog("Failed to analyze file:",t),t}}async *processFileStreaming(t,e){try{let i=new FormData;i.append("file",t),i.append("tenant_id",this.config.tenantId),i.append("schema_config",JSON.stringify(e));let a=await fetch(`${this.config.apiUrl}/rag/ingest-file-streaming`,{method:"POST",headers:{"X-Tenant-ID":this.config.tenantId},body:i});if(!a.ok)throw Error(`File processing failed: ${a.statusText}`);let o=a.body?.getReader();if(!o)throw Error("No response body available");let n=new TextDecoder,r="";for(;;){let t;let{done:e,value:i}=await o.read();if(e)break;for(r+=n.decode(i,{stream:!0});-1!==(t=r.indexOf("\n"));){let e=r.slice(0,t).trimEnd();if(r=r.slice(t+1),!e.startsWith("data: "))continue;let i=e.slice(6).trim();if("[DONE]"===i){this.debugLog("File processing completed");return}try{let t=JSON.parse(i);this.debugLog("Processing progress:",t),yield t}catch(t){this.config.debug&&console.warn("[WebAI API] Parse error:",t,"for data:",i)}}}}catch(t){throw this.debugLog("Failed to process file:",t),t}}async processFileAsync(t,e){try{let i=new FormData;i.append("file",t),i.append("tenant_id",this.config.tenantId),i.append("schema_config",JSON.stringify(e));let a=await fetch(`${this.config.apiUrl}/rag/ingest-file-async`,{method:"POST",headers:{"X-Tenant-ID":this.config.tenantId},body:i});if(!a.ok)throw Error(`Async processing failed: ${a.statusText}`);let o=await a.json();return this.debugLog("Async processing started:",o),o}catch(t){throw this.debugLog("Failed to start async processing:",t),t}}async getProcessingStatus(t){try{let e=await fetch(`${this.config.apiUrl}/rag/job-status/${t}`,{method:"GET",headers:{"X-Tenant-ID":this.config.tenantId}});if(!e.ok)throw Error(`Failed to get job status: ${e.statusText}`);let i=await e.json();return this.debugLog("Job status:",i),i}catch(t){throw this.debugLog("Failed to get job status:",t),t}}};function createTenantSetupApi(){let t=new URLSearchParams(window.location.search),e={apiUrl:"https://web3ai-backend-v65-api-180395924844.us-central1.run.app",tenantId:t.get("tenant")||"setup",sessionId:t.get("session")||"setup",useRAG:!1,ragTopK:4,debug:"true"===t.get("debug")};return new WebAITenantSetupApi(e)}}};